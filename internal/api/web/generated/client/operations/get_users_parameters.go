// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetUsersParams creates a new GetUsersParams object
// with the default values initialized.
func NewGetUsersParams() *GetUsersParams {
	var (
		limitDefault  = int32(100)
		offsetDefault = int32(0)
	)
	return &GetUsersParams{
		Limit:  limitDefault,
		Offset: &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUsersParamsWithTimeout creates a new GetUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUsersParamsWithTimeout(timeout time.Duration) *GetUsersParams {
	var (
		limitDefault  = int32(100)
		offsetDefault = int32(0)
	)
	return &GetUsersParams{
		Limit:  limitDefault,
		Offset: &offsetDefault,

		timeout: timeout,
	}
}

// NewGetUsersParamsWithContext creates a new GetUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUsersParamsWithContext(ctx context.Context) *GetUsersParams {
	var (
		limitDefault  = int32(100)
		offsetDefault = int32(0)
	)
	return &GetUsersParams{
		Limit:  limitDefault,
		Offset: &offsetDefault,

		Context: ctx,
	}
}

// NewGetUsersParamsWithHTTPClient creates a new GetUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUsersParamsWithHTTPClient(client *http.Client) *GetUsersParams {
	var (
		limitDefault  = int32(100)
		offsetDefault = int32(0)
	)
	return &GetUsersParams{
		Limit:      limitDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetUsersParams contains all the parameters to send to the API endpoint
for the get users operation typically these are written to a http.Request
*/
type GetUsersParams struct {

	/*Limit*/
	Limit int32
	/*Offset*/
	Offset *int32
	/*Username*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get users params
func (o *GetUsersParams) WithTimeout(timeout time.Duration) *GetUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get users params
func (o *GetUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get users params
func (o *GetUsersParams) WithContext(ctx context.Context) *GetUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get users params
func (o *GetUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) WithHTTPClient(client *http.Client) *GetUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get users params
func (o *GetUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get users params
func (o *GetUsersParams) WithLimit(limit int32) *GetUsersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get users params
func (o *GetUsersParams) SetLimit(limit int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get users params
func (o *GetUsersParams) WithOffset(offset *int32) *GetUsersParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get users params
func (o *GetUsersParams) SetOffset(offset *int32) {
	o.Offset = offset
}

// WithUsername adds the username to the get users params
func (o *GetUsersParams) WithUsername(username string) *GetUsersParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get users params
func (o *GetUsersParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param limit
	qrLimit := o.Limit
	qLimit := swag.FormatInt32(qrLimit)
	if qLimit != "" {
		if err := r.SetQueryParam("limit", qLimit); err != nil {
			return err
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int32
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt32(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	// query param username
	qrUsername := o.Username
	qUsername := qrUsername
	if qUsername != "" {
		if err := r.SetQueryParam("username", qUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
