// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generated command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/zergslaw/boilerplate/internal/api/web/generated/models"
)

// RecoveryPasswordHandlerFunc turns a function with the right signature into a recovery password handler
type RecoveryPasswordHandlerFunc func(RecoveryPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RecoveryPasswordHandlerFunc) Handle(params RecoveryPasswordParams) middleware.Responder {
	return fn(params)
}

// RecoveryPasswordHandler interface for that can handle valid recovery password params
type RecoveryPasswordHandler interface {
	Handle(RecoveryPasswordParams) middleware.Responder
}

// NewRecoveryPassword creates a new http.Handler for the recovery password operation
func NewRecoveryPassword(ctx *middleware.Context, handler RecoveryPasswordHandler) *RecoveryPassword {
	return &RecoveryPassword{Context: ctx, Handler: handler}
}

/*RecoveryPassword swagger:route POST /recovery-password recoveryPassword

Updates the password of the user who owns this recovery code.

*/
type RecoveryPassword struct {
	Context *middleware.Context
	Handler RecoveryPasswordHandler
}

func (o *RecoveryPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRecoveryPasswordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RecoveryPasswordBody recovery password body
//
// swagger:model RecoveryPasswordBody
type RecoveryPasswordBody struct {

	// password
	// Required: true
	// Format: password
	Password models.Password `json:"password"`

	// recovery code
	// Required: true
	RecoveryCode models.RecoveryCode `json:"recoveryCode"`
}

// Validate validates this recovery password body
func (o *RecoveryPasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecoveryCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RecoveryPasswordBody) validatePassword(formats strfmt.Registry) error {

	if err := o.Password.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "password")
		}
		return err
	}

	return nil
}

func (o *RecoveryPasswordBody) validateRecoveryCode(formats strfmt.Registry) error {

	if err := o.RecoveryCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "recoveryCode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RecoveryPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecoveryPasswordBody) UnmarshalBinary(b []byte) error {
	var res RecoveryPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
