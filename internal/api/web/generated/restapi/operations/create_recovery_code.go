// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/zergslaw/boilerplate/internal/api/web/generated/models"
)

// CreateRecoveryCodeHandlerFunc turns a function with the right signature into a create recovery code handler
type CreateRecoveryCodeHandlerFunc func(CreateRecoveryCodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateRecoveryCodeHandlerFunc) Handle(params CreateRecoveryCodeParams) middleware.Responder {
	return fn(params)
}

// CreateRecoveryCodeHandler interface for that can handle valid create recovery code params
type CreateRecoveryCodeHandler interface {
	Handle(CreateRecoveryCodeParams) middleware.Responder
}

// NewCreateRecoveryCode creates a new http.Handler for the create recovery code operation
func NewCreateRecoveryCode(ctx *middleware.Context, handler CreateRecoveryCodeHandler) *CreateRecoveryCode {
	return &CreateRecoveryCode{Context: ctx, Handler: handler}
}

/*CreateRecoveryCode swagger:route POST /recovery-code createRecoveryCode

Creates a password recovery token and sends it to the email.

*/
type CreateRecoveryCode struct {
	Context *middleware.Context
	Handler CreateRecoveryCodeHandler
}

func (o *CreateRecoveryCode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateRecoveryCodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateRecoveryCodeBody create recovery code body
//
// swagger:model CreateRecoveryCodeBody
type CreateRecoveryCodeBody struct {

	// email
	// Required: true
	// Format: email
	Email models.Email `json:"email"`
}

// Validate validates this create recovery code body
func (o *CreateRecoveryCodeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateRecoveryCodeBody) validateEmail(formats strfmt.Registry) error {

	if err := o.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "email")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRecoveryCodeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRecoveryCodeBody) UnmarshalBinary(b []byte) error {
	var res CreateRecoveryCodeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
