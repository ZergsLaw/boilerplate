// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package rest

import (
	"github.com/go-openapi/swag"
	"github.com/sirupsen/logrus"
	"github.com/zergslaw/users/internal/api/rest/generated/models"
	"github.com/zergslaw/users/internal/api/rest/generated/restapi/operations"
)

//nolint:dupl,goconst
func errLogin(log logrus.FieldLogger, err error, code int) operations.LoginResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewLoginDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errLogout(log logrus.FieldLogger, err error, code int) operations.LogoutResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewLogoutDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errVerificationEmail(log logrus.FieldLogger, err error, code int) operations.VerificationEmailResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewVerificationEmailDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errVerificationUsername(log logrus.FieldLogger, err error, code int) operations.VerificationUsernameResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewVerificationUsernameDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errGetUser(log logrus.FieldLogger, err error, code int) operations.GetUserResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewGetUserDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errDeleteUser(log logrus.FieldLogger, err error, code int) operations.DeleteUserResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewDeleteUserDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errUpdatePassword(log logrus.FieldLogger, err error, code int) operations.UpdatePasswordResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewUpdatePasswordDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errUpdateUsername(log logrus.FieldLogger, err error, code int) operations.UpdateUsernameResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewUpdateUsernameDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errUpdateEmail(log logrus.FieldLogger, err error, code int) operations.UpdateEmailResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewUpdateEmailDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}

//nolint:dupl,goconst
func errGetUsers(log logrus.FieldLogger, err error, code int) operations.GetUsersResponder { //nolint:deadcode,unused
	if code < 500 {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "client"}).Info(err)
	} else {
		log.WithFields(logrus.Fields{LogHTTPStatus: code, LogError: "server"}).Warn(err)
	}

	msg := err.Error()
	if code == 500 { // Do no expose details about internal errors.
		msg = "internal error"
	}

	return operations.NewGetUsersDefault(code).WithPayload(&models.Error{Message: swag.String(msg)})
}
