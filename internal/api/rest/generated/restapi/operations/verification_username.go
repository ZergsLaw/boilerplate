// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// VerificationUsernameHandlerFunc turns a function with the right signature into a verification username handler
type VerificationUsernameHandlerFunc func(VerificationUsernameParams) VerificationUsernameResponder

// Handle executing the request and returning a response
func (fn VerificationUsernameHandlerFunc) Handle(params VerificationUsernameParams) VerificationUsernameResponder {
	return fn(params)
}

// VerificationUsernameHandler interface for that can handle valid verification username params
type VerificationUsernameHandler interface {
	Handle(VerificationUsernameParams) VerificationUsernameResponder
}

// NewVerificationUsername creates a new http.Handler for the verification username operation
func NewVerificationUsername(ctx *middleware.Context, handler VerificationUsernameHandler) *VerificationUsername {
	return &VerificationUsername{Context: ctx, Handler: handler}
}

/*VerificationUsername swagger:route POST /username/verification verificationUsername

VerificationUsername verification username API

*/
type VerificationUsername struct {
	Context *middleware.Context
	Handler VerificationUsernameHandler
}

func (o *VerificationUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewVerificationUsernameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
