// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"io"
	"net/http"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"

	"github.com/zergslaw/users/internal/api/rest/generated/restapi/operations"
	"github.com/zergslaw/users/internal/app"
)

func BuildAPI(
	swaggerSpec *loads.Document,
	ServeError func(http.ResponseWriter, *http.Request, error),
	Logger func(string, ...interface{}),

	JSONConsumer func(r io.Reader, target interface{}) error,

	JSONProducer func(w io.Writer, data interface{}) error,

	CookieKeyAuth func(token string) (*app.AuthUser, error),
	APIAuthorizer runtime.Authorizer,

	CreateUser func(params operations.CreateUserParams) operations.CreateUserResponder,
	DeleteUser func(params operations.DeleteUserParams, principal *app.AuthUser) operations.DeleteUserResponder,
	GetUser func(params operations.GetUserParams, principal *app.AuthUser) operations.GetUserResponder,
	GetUsers func(params operations.GetUsersParams, principal *app.AuthUser) operations.GetUsersResponder,
	Login func(params operations.LoginParams) operations.LoginResponder,
	Logout func(params operations.LogoutParams, principal *app.AuthUser) operations.LogoutResponder,
	UpdateEmail func(params operations.UpdateEmailParams, principal *app.AuthUser) operations.UpdateEmailResponder,
	UpdatePassword func(params operations.UpdatePasswordParams, principal *app.AuthUser) operations.UpdatePasswordResponder,
	UpdateUsername func(params operations.UpdateUsernameParams, principal *app.AuthUser) operations.UpdateUsernameResponder,
	VerificationEmail func(params operations.VerificationEmailParams) operations.VerificationEmailResponder,
	VerificationUsername func(params operations.VerificationUsernameParams) operations.VerificationUsernameResponder,

	ServerShutdown func(),

) *operations.ServiceUserAPI {
	api := operations.NewServiceUserAPI(swaggerSpec)

	if ServeError != nil {
		api.ServeError = errors.ServeError
	}

	if Logger != nil {
		api.Logger = Logger
	}

	if JSONConsumer != nil {
		api.JSONConsumer = runtime.ConsumerFunc(JSONConsumer)
	}

	if JSONProducer != nil {
		api.JSONProducer = runtime.ProducerFunc(JSONProducer)
	}

	if CookieKeyAuth != nil {
		api.CookieKeyAuth = CookieKeyAuth
	}
	if APIAuthorizer != nil {
		api.APIAuthorizer = APIAuthorizer
	}

	if CreateUser != nil {
		api.CreateUserHandler = operations.CreateUserHandlerFunc(CreateUser)
	}

	if DeleteUser != nil {
		api.DeleteUserHandler = operations.DeleteUserHandlerFunc(DeleteUser)
	}

	if GetUser != nil {
		api.GetUserHandler = operations.GetUserHandlerFunc(GetUser)
	}

	if GetUsers != nil {
		api.GetUsersHandler = operations.GetUsersHandlerFunc(GetUsers)
	}

	if Login != nil {
		api.LoginHandler = operations.LoginHandlerFunc(Login)
	}

	if Logout != nil {
		api.LogoutHandler = operations.LogoutHandlerFunc(Logout)
	}

	if UpdateEmail != nil {
		api.UpdateEmailHandler = operations.UpdateEmailHandlerFunc(UpdateEmail)
	}

	if UpdatePassword != nil {
		api.UpdatePasswordHandler = operations.UpdatePasswordHandlerFunc(UpdatePassword)
	}

	if UpdateUsername != nil {
		api.UpdateUsernameHandler = operations.UpdateUsernameHandlerFunc(UpdateUsername)
	}

	if VerificationEmail != nil {
		api.VerificationEmailHandler = operations.VerificationEmailHandlerFunc(VerificationEmail)
	}

	if VerificationUsername != nil {
		api.VerificationUsernameHandler = operations.VerificationUsernameHandlerFunc(VerificationUsername)
	}

	if ServerShutdown != nil {
		api.ServerShutdown = ServerShutdown
	}

	return api
}
