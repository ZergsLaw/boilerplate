swagger: '2.0'

info:
  version: 0.1.0
  title: "Service user"
  description: ""
  license:
    name: MIT

consumes:
  - application/json
produces:
  - application/json

basePath: /api/v1

security:
  - cookieKey: []

securityDefinitions:

  cookieKey:
    description: Session auth inside cookie.
    type: apiKey
    in: header
    name: Cookie

definitions:

  Error:
    type: object
    required:
      - message
    properties:
      message:
        type: string

  Pagination:
    type: object
    required:
      - limit
      - offset
    properties:
      limit:
        description: Maximum amount of items to return.
        type: integer
        format: int32
        minimum: 1
        maximum: 100
      offset:
        description: Amount of items to skip.
        type: integer
        format: int32
        minimum: 0
        maximum: 9900

  Email:
    type: string
    format: email
    minLength: 1
    maxLength: 255

  Password:
    type: string
    format: password
    minLength: 8
    maxLength: 100

  UserID:
    type: integer
    format: int32

  Username:
    type: string
    minLength: 1
    maxLength: 30

  UpdatePassword:
    type: object
    required:
      - old
      - new
    properties:
      old:
        $ref: '#/definitions/Password'
      new:
        $ref: '#/definitions/Password'

  CreateUserParams:
    type: object
    required:
      - email
      - password
      - username
    properties:
      email:
        $ref: '#/definitions/Email'
      username:
        $ref: '#/definitions/Username'
      password:
        $ref: '#/definitions/Password'

  ListUsersParams:
    type: object
    required:
      - username
      - pagination
    properties:
      username:
        $ref: '#/definitions/Username'
      pagination:
        $ref: '#/definitions/Pagination'

  LoginParam:
    type: object
    required:
      - email
      - password
    properties:
      email:
        $ref: '#/definitions/Email'
      password:
        $ref: '#/definitions/Password'

  User:
    type: object
    required:
      - id
      - username
    properties:
      id:
        $ref: '#/definitions/UserID'
      username:
        $ref: '#/definitions/Username'
      email:
        $ref: '#/definitions/Email'

responses:

  GenericError:
    description: Generic error response.
    schema:
      $ref: '#/definitions/Error'

  NoContent:
    description: The server successfully processed the request and is not returning any content.

paths:

  /email/verification:
    post:
      operationId: verificationEmail
      security: []
      parameters:
        - name: email
          in: body
          required: true
          schema:
            $ref: '#/definitions/Email'
      responses:
        204: {$ref: '#/responses/NoContent'}
        default: {$ref: '#/responses/GenericError'}

  /username/verification:
    post:
      operationId: verificationUsername
      security: []
      parameters:
        - name: username
          in: body
          required: true
          schema:
            $ref: '#/definitions/Username'
      responses:
        204: {$ref: '#/responses/NoContent'}
        default: {$ref: '#/responses/GenericError'}

  /login:
    post:
      operationId: login
      description: Login for user.
      security: []
      parameters:
        - name: args
          in: body
          required: true
          schema:
            $ref: '#/definitions/LoginParam'
      responses:
        200:
          description: OK
          headers: &session-token
            Set-Cookie:
              description: Session auth.
              type: string
          schema:
            $ref: '#/definitions/User'
        default: {$ref: '#/responses/GenericError'}

  /logout:
    post:
      operationId: logout
      description: Logout for user
      responses:
        204: {$ref: '#/responses/NoContent'}
        default: {$ref: '#/responses/GenericError'}

  /user:
    post:
      operationId: createUser
      description: New user registration. If it is not sent to username, it will be the userID
      security: []
      parameters:
        - name: args
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserParams'
      responses:
        200:
          description: OK
          headers: *session-token
          schema:
            $ref: '#/definitions/User'
        default: {$ref: '#/responses/GenericError'}

    get:
      operationId: getUser
      description: Open user profile.
      parameters:
        - name: id
          in: query
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/User'
        default: {$ref: '#/responses/GenericError'}

    delete:
      operationId: deleteUser
      description: Deletion of your account.
      responses:
        204: {$ref: '#/responses/NoContent'}
        default: {$ref: '#/responses/GenericError'}

  /user/password:
    patch:
      operationId: updatePassword
      description: Change password.
      parameters:
        - name: args
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePassword'
      responses:
        204: {$ref: '#/responses/NoContent'}
        default: {$ref: '#/responses/GenericError'}

  /user/username:
    patch:
      operationId: updateUsername
      description: Change username.
      parameters:
        - name: username
          in: body
          required: true
          schema:
            $ref: '#/definitions/Username'
      responses:
        204: {$ref: '#/responses/NoContent'}
        default: {$ref: '#/responses/GenericError'}

  /user/email:
    patch:
      operationId: updateEmail
      description: Change email.
      parameters:
        - name: email
          in: body
          required: true
          schema:
            $ref: '#/definitions/Email'
      responses:
        204: {$ref: '#/responses/NoContent'}
        default: {$ref: '#/responses/GenericError'}

  /users:
    get:
      operationId: getUsers
      description: User search.
      parameters:
        - name: args
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListUsersParams'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              users:
                type: array
                uniqueItems: true
                maxItems: 100
                items:
                  $ref: '#/definitions/User'
              total:
                type: integer
                format: int32
                minimum: 0
        default: {$ref: '#/responses/GenericError'}

