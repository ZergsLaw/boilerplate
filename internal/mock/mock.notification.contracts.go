// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/notification.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	app "github.com/zergslaw/boilerplate/internal/app"
	reflect "reflect"
)

// MockNotification is a mock of Notification interface
type MockNotification struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationMockRecorder
}

// MockNotificationMockRecorder is the mock recorder for MockNotification
type MockNotificationMockRecorder struct {
	mock *MockNotification
}

// NewMockNotification creates a new mock instance
func NewMockNotification(ctrl *gomock.Controller) *MockNotification {
	mock := &MockNotification{ctrl: ctrl}
	mock.recorder = &MockNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotification) EXPECT() *MockNotificationMockRecorder {
	return m.recorder
}

// Notification mocks base method
func (m *MockNotification) Notification(contact string, msg app.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notification", contact, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notification indicates an expected call of Notification
func (mr *MockNotificationMockRecorder) Notification(contact, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notification", reflect.TypeOf((*MockNotification)(nil).Notification), contact, msg)
}
