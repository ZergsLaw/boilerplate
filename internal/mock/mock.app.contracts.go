// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/app.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	app "github.com/zergslaw/boilerplate/internal/app"
	reflect "reflect"
)

// MockApp is a mock of App interface
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// VerificationEmail mocks base method
func (m *MockApp) VerificationEmail(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerificationEmail indicates an expected call of VerificationEmail
func (mr *MockAppMockRecorder) VerificationEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationEmail", reflect.TypeOf((*MockApp)(nil).VerificationEmail), ctx, email)
}

// VerificationUsername mocks base method
func (m *MockApp) VerificationUsername(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationUsername", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerificationUsername indicates an expected call of VerificationUsername
func (mr *MockAppMockRecorder) VerificationUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationUsername", reflect.TypeOf((*MockApp)(nil).VerificationUsername), ctx, username)
}

// Login mocks base method
func (m *MockApp) Login(ctx context.Context, email, password string, origin app.Origin) (*app.User, app.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password, origin)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(app.AuthToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login
func (mr *MockAppMockRecorder) Login(ctx, email, password, origin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockApp)(nil).Login), ctx, email, password, origin)
}

// Logout mocks base method
func (m *MockApp) Logout(arg0 context.Context, arg1 app.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *MockAppMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockApp)(nil).Logout), arg0, arg1)
}

// CreateUser mocks base method
func (m *MockApp) CreateUser(ctx context.Context, email, username, password string, origin app.Origin) (*app.User, app.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email, username, password, origin)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(app.AuthToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAppMockRecorder) CreateUser(ctx, email, username, password, origin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockApp)(nil).CreateUser), ctx, email, username, password, origin)
}

// DeleteUser mocks base method
func (m *MockApp) DeleteUser(arg0 context.Context, arg1 app.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockAppMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockApp)(nil).DeleteUser), arg0, arg1)
}

// User mocks base method
func (m *MockApp) User(arg0 context.Context, arg1 app.AuthUser, arg2 app.UserID) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1, arg2)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockAppMockRecorder) User(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockApp)(nil).User), arg0, arg1, arg2)
}

// UserByAuthToken mocks base method
func (m *MockApp) UserByAuthToken(ctx context.Context, token app.AuthToken) (*app.AuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByAuthToken", ctx, token)
	ret0, _ := ret[0].(*app.AuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByAuthToken indicates an expected call of UserByAuthToken
func (mr *MockAppMockRecorder) UserByAuthToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByAuthToken", reflect.TypeOf((*MockApp)(nil).UserByAuthToken), ctx, token)
}

// UpdateUsername mocks base method
func (m *MockApp) UpdateUsername(arg0 context.Context, arg1 app.AuthUser, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername
func (mr *MockAppMockRecorder) UpdateUsername(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*MockApp)(nil).UpdateUsername), arg0, arg1, arg2)
}

// UpdateEmail mocks base method
func (m *MockApp) UpdateEmail(arg0 context.Context, arg1 app.AuthUser, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail
func (mr *MockAppMockRecorder) UpdateEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockApp)(nil).UpdateEmail), arg0, arg1, arg2)
}

// UpdatePassword mocks base method
func (m *MockApp) UpdatePassword(ctx context.Context, authUser app.AuthUser, oldPass, newPass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, authUser, oldPass, newPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockAppMockRecorder) UpdatePassword(ctx, authUser, oldPass, newPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockApp)(nil).UpdatePassword), ctx, authUser, oldPass, newPass)
}

// ListUserByUsername mocks base method
func (m *MockApp) ListUserByUsername(arg0 context.Context, arg1 app.AuthUser, arg2 string, arg3 app.Page) ([]app.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserByUsername", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]app.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserByUsername indicates an expected call of ListUserByUsername
func (mr *MockAppMockRecorder) ListUserByUsername(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserByUsername", reflect.TypeOf((*MockApp)(nil).ListUserByUsername), arg0, arg1, arg2, arg3)
}

// CreateRecoveryCode mocks base method
func (m *MockApp) CreateRecoveryCode(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryCode", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecoveryCode indicates an expected call of CreateRecoveryCode
func (mr *MockAppMockRecorder) CreateRecoveryCode(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryCode", reflect.TypeOf((*MockApp)(nil).CreateRecoveryCode), ctx, email)
}

// RecoveryPassword mocks base method
func (m *MockApp) RecoveryPassword(ctx context.Context, code, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoveryPassword", ctx, code, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoveryPassword indicates an expected call of RecoveryPassword
func (mr *MockAppMockRecorder) RecoveryPassword(ctx, code, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoveryPassword", reflect.TypeOf((*MockApp)(nil).RecoveryPassword), ctx, code, newPassword)
}
