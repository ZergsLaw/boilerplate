// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/wal.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	app "github.com/zergslaw/boilerplate/internal/app"
)

// MockWALApplication is a mock of WALApplication interface
type MockWALApplication struct {
	ctrl     *gomock.Controller
	recorder *MockWALApplicationMockRecorder
}

// MockWALApplicationMockRecorder is the mock recorder for MockWALApplication
type MockWALApplicationMockRecorder struct {
	mock *MockWALApplication
}

// NewMockWALApplication creates a new mock instance
func NewMockWALApplication(ctrl *gomock.Controller) *MockWALApplication {
	mock := &MockWALApplication{ctrl: ctrl}
	mock.recorder = &MockWALApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWALApplication) EXPECT() *MockWALApplicationMockRecorder {
	return m.recorder
}

// StartWALNotification mocks base method
func (m *MockWALApplication) StartWALNotification(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWALNotification", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWALNotification indicates an expected call of StartWALNotification
func (mr *MockWALApplicationMockRecorder) StartWALNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWALNotification", reflect.TypeOf((*MockWALApplication)(nil).StartWALNotification), ctx)
}

// MockWAL is a mock of WAL interface
type MockWAL struct {
	ctrl     *gomock.Controller
	recorder *MockWALMockRecorder
}

// MockWALMockRecorder is the mock recorder for MockWAL
type MockWALMockRecorder struct {
	mock *MockWAL
}

// NewMockWAL creates a new mock instance
func NewMockWAL(ctrl *gomock.Controller) *MockWAL {
	mock := &MockWAL{ctrl: ctrl}
	mock.recorder = &MockWALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWAL) EXPECT() *MockWALMockRecorder {
	return m.recorder
}

// NotificationTask mocks base method
func (m *MockWAL) NotificationTask(ctx context.Context) (*app.TaskNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationTask", ctx)
	ret0, _ := ret[0].(*app.TaskNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationTask indicates an expected call of NotificationTask
func (mr *MockWALMockRecorder) NotificationTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationTask", reflect.TypeOf((*MockWAL)(nil).NotificationTask), ctx)
}

// DeleteTaskNotification mocks base method
func (m *MockWAL) DeleteTaskNotification(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskNotification indicates an expected call of DeleteTaskNotification
func (mr *MockWALMockRecorder) DeleteTaskNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskNotification", reflect.TypeOf((*MockWAL)(nil).DeleteTaskNotification), ctx, id)
}
