// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/app.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	app "github.com/zergslaw/boilerplate/internal/app"
	reflect "reflect"
	time "time"
)

// UserRepo is a mock of UserRepo interface
type UserRepo struct {
	ctrl     *gomock.Controller
	recorder *UserRepoMockRecorder
}

// UserRepoMockRecorder is the mock recorder for UserRepo
type UserRepoMockRecorder struct {
	mock *UserRepo
}

// NewUserRepo creates a new mock instance
func NewUserRepo(ctrl *gomock.Controller) *UserRepo {
	mock := &UserRepo{ctrl: ctrl}
	mock.recorder = &UserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *UserRepo) EXPECT() *UserRepoMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *UserRepo) CreateUser(arg0 context.Context, arg1 app.User) (app.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(app.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *UserRepoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*UserRepo)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method
func (m *UserRepo) DeleteUser(arg0 context.Context, arg1 app.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *UserRepoMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*UserRepo)(nil).DeleteUser), arg0, arg1)
}

// UpdateUsername mocks base method
func (m *UserRepo) UpdateUsername(arg0 context.Context, arg1 app.UserID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername
func (mr *UserRepoMockRecorder) UpdateUsername(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*UserRepo)(nil).UpdateUsername), arg0, arg1, arg2)
}

// UpdateEmail mocks base method
func (m *UserRepo) UpdateEmail(arg0 context.Context, arg1 app.UserID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail
func (mr *UserRepoMockRecorder) UpdateEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*UserRepo)(nil).UpdateEmail), arg0, arg1, arg2)
}

// UpdatePassword mocks base method
func (m *UserRepo) UpdatePassword(arg0 context.Context, arg1 app.UserID, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *UserRepoMockRecorder) UpdatePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*UserRepo)(nil).UpdatePassword), arg0, arg1, arg2)
}

// UserByID mocks base method
func (m *UserRepo) UserByID(arg0 context.Context, arg1 app.UserID) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID
func (mr *UserRepoMockRecorder) UserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*UserRepo)(nil).UserByID), arg0, arg1)
}

// UserByTokenID mocks base method
func (m *UserRepo) UserByTokenID(arg0 context.Context, arg1 app.TokenID) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByTokenID", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByTokenID indicates an expected call of UserByTokenID
func (mr *UserRepoMockRecorder) UserByTokenID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByTokenID", reflect.TypeOf((*UserRepo)(nil).UserByTokenID), arg0, arg1)
}

// UserByEmail mocks base method
func (m *UserRepo) UserByEmail(arg0 context.Context, arg1 string) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByEmail indicates an expected call of UserByEmail
func (mr *UserRepoMockRecorder) UserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByEmail", reflect.TypeOf((*UserRepo)(nil).UserByEmail), arg0, arg1)
}

// UserByUsername mocks base method
func (m *UserRepo) UserByUsername(arg0 context.Context, arg1 string) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByUsername indicates an expected call of UserByUsername
func (mr *UserRepoMockRecorder) UserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByUsername", reflect.TypeOf((*UserRepo)(nil).UserByUsername), arg0, arg1)
}

// ListUserByUsername mocks base method
func (m *UserRepo) ListUserByUsername(arg0 context.Context, arg1 string, arg2 app.Page) ([]app.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserByUsername", arg0, arg1, arg2)
	ret0, _ := ret[0].([]app.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserByUsername indicates an expected call of ListUserByUsername
func (mr *UserRepoMockRecorder) ListUserByUsername(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserByUsername", reflect.TypeOf((*UserRepo)(nil).ListUserByUsername), arg0, arg1, arg2)
}

// SessionRepo is a mock of SessionRepo interface
type SessionRepo struct {
	ctrl     *gomock.Controller
	recorder *SessionRepoMockRecorder
}

// SessionRepoMockRecorder is the mock recorder for SessionRepo
type SessionRepoMockRecorder struct {
	mock *SessionRepo
}

// NewSessionRepo creates a new mock instance
func NewSessionRepo(ctrl *gomock.Controller) *SessionRepo {
	mock := &SessionRepo{ctrl: ctrl}
	mock.recorder = &SessionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SessionRepo) EXPECT() *SessionRepoMockRecorder {
	return m.recorder
}

// SaveSession mocks base method
func (m *SessionRepo) SaveSession(arg0 context.Context, arg1 app.UserID, arg2 app.TokenID, arg3 app.Origin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession
func (mr *SessionRepoMockRecorder) SaveSession(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*SessionRepo)(nil).SaveSession), arg0, arg1, arg2, arg3)
}

// SessionByTokenID mocks base method
func (m *SessionRepo) SessionByTokenID(arg0 context.Context, arg1 app.TokenID) (*app.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionByTokenID", arg0, arg1)
	ret0, _ := ret[0].(*app.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionByTokenID indicates an expected call of SessionByTokenID
func (mr *SessionRepoMockRecorder) SessionByTokenID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionByTokenID", reflect.TypeOf((*SessionRepo)(nil).SessionByTokenID), arg0, arg1)
}

// DeleteSession mocks base method
func (m *SessionRepo) DeleteSession(arg0 context.Context, arg1 app.TokenID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession
func (mr *SessionRepoMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*SessionRepo)(nil).DeleteSession), arg0, arg1)
}

// CodeRepo is a mock of CodeRepo interface
type CodeRepo struct {
	ctrl     *gomock.Controller
	recorder *CodeRepoMockRecorder
}

// CodeRepoMockRecorder is the mock recorder for CodeRepo
type CodeRepoMockRecorder struct {
	mock *CodeRepo
}

// NewCodeRepo creates a new mock instance
func NewCodeRepo(ctrl *gomock.Controller) *CodeRepo {
	mock := &CodeRepo{ctrl: ctrl}
	mock.recorder = &CodeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *CodeRepo) EXPECT() *CodeRepoMockRecorder {
	return m.recorder
}

// SaveCode mocks base method
func (m *CodeRepo) SaveCode(ctx context.Context, id app.UserID, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCode", ctx, id, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCode indicates an expected call of SaveCode
func (mr *CodeRepoMockRecorder) SaveCode(ctx, id, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCode", reflect.TypeOf((*CodeRepo)(nil).SaveCode), ctx, id, code)
}

// UserID mocks base method
func (m *CodeRepo) UserID(ctx context.Context, code string) (app.UserID, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID", ctx, code)
	ret0, _ := ret[0].(app.UserID)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserID indicates an expected call of UserID
func (mr *CodeRepoMockRecorder) UserID(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*CodeRepo)(nil).UserID), ctx, code)
}

// Code mocks base method
func (m *CodeRepo) Code(ctx context.Context, id app.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Code", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Code indicates an expected call of Code
func (mr *CodeRepoMockRecorder) Code(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Code", reflect.TypeOf((*CodeRepo)(nil).Code), ctx, id)
}

// WAL is a mock of WAL interface
type WAL struct {
	ctrl     *gomock.Controller
	recorder *WALMockRecorder
}

// WALMockRecorder is the mock recorder for WAL
type WALMockRecorder struct {
	mock *WAL
}

// NewWAL creates a new mock instance
func NewWAL(ctrl *gomock.Controller) *WAL {
	mock := &WAL{ctrl: ctrl}
	mock.recorder = &WALMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *WAL) EXPECT() *WALMockRecorder {
	return m.recorder
}

// NotificationTask mocks base method
func (m *WAL) NotificationTask(ctx context.Context) (*app.TaskNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationTask", ctx)
	ret0, _ := ret[0].(*app.TaskNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationTask indicates an expected call of NotificationTask
func (mr *WALMockRecorder) NotificationTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationTask", reflect.TypeOf((*WAL)(nil).NotificationTask), ctx)
}

// DeleteTaskNotification mocks base method
func (m *WAL) DeleteTaskNotification(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTaskNotification", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTaskNotification indicates an expected call of DeleteTaskNotification
func (mr *WALMockRecorder) DeleteTaskNotification(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTaskNotification", reflect.TypeOf((*WAL)(nil).DeleteTaskNotification), ctx, id)
}

// Notification is a mock of Notification interface
type Notification struct {
	ctrl     *gomock.Controller
	recorder *NotificationMockRecorder
}

// NotificationMockRecorder is the mock recorder for Notification
type NotificationMockRecorder struct {
	mock *Notification
}

// NewNotification creates a new mock instance
func NewNotification(ctrl *gomock.Controller) *Notification {
	mock := &Notification{ctrl: ctrl}
	mock.recorder = &NotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Notification) EXPECT() *NotificationMockRecorder {
	return m.recorder
}

// Notification mocks base method
func (m *Notification) Notification(contact string, msg app.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notification", contact, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notification indicates an expected call of Notification
func (mr *NotificationMockRecorder) Notification(contact, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notification", reflect.TypeOf((*Notification)(nil).Notification), contact, msg)
}

// Code is a mock of Code interface
type Code struct {
	ctrl     *gomock.Controller
	recorder *CodeMockRecorder
}

// CodeMockRecorder is the mock recorder for Code
type CodeMockRecorder struct {
	mock *Code
}

// NewCode creates a new mock instance
func NewCode(ctrl *gomock.Controller) *Code {
	mock := &Code{ctrl: ctrl}
	mock.recorder = &CodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Code) EXPECT() *CodeMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *Code) Generate(length int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", length)
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *CodeMockRecorder) Generate(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*Code)(nil).Generate), length)
}

// Password is a mock of Password interface
type Password struct {
	ctrl     *gomock.Controller
	recorder *PasswordMockRecorder
}

// PasswordMockRecorder is the mock recorder for Password
type PasswordMockRecorder struct {
	mock *Password
}

// NewPassword creates a new mock instance
func NewPassword(ctrl *gomock.Controller) *Password {
	mock := &Password{ctrl: ctrl}
	mock.recorder = &PasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Password) EXPECT() *PasswordMockRecorder {
	return m.recorder
}

// Hashing mocks base method
func (m *Password) Hashing(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashing", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hashing indicates an expected call of Hashing
func (mr *PasswordMockRecorder) Hashing(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashing", reflect.TypeOf((*Password)(nil).Hashing), password)
}

// Compare mocks base method
func (m *Password) Compare(hashedPassword, password []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hashedPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare
func (mr *PasswordMockRecorder) Compare(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*Password)(nil).Compare), hashedPassword, password)
}

// Auth is a mock of Auth interface
type Auth struct {
	ctrl     *gomock.Controller
	recorder *AuthMockRecorder
}

// AuthMockRecorder is the mock recorder for Auth
type AuthMockRecorder struct {
	mock *Auth
}

// NewAuth creates a new mock instance
func NewAuth(ctrl *gomock.Controller) *Auth {
	mock := &Auth{ctrl: ctrl}
	mock.recorder = &AuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Auth) EXPECT() *AuthMockRecorder {
	return m.recorder
}

// Token mocks base method
func (m *Auth) Token(expired time.Duration) (app.AuthToken, app.TokenID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", expired)
	ret0, _ := ret[0].(app.AuthToken)
	ret1, _ := ret[1].(app.TokenID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Token indicates an expected call of Token
func (mr *AuthMockRecorder) Token(expired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*Auth)(nil).Token), expired)
}

// Parse mocks base method
func (m *Auth) Parse(token app.AuthToken) (app.TokenID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", token)
	ret0, _ := ret[0].(app.TokenID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *AuthMockRecorder) Parse(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*Auth)(nil).Parse), token)
}

// OAuth is a mock of OAuth interface
type OAuth struct {
	ctrl     *gomock.Controller
	recorder *OAuthMockRecorder
}

// OAuthMockRecorder is the mock recorder for OAuth
type OAuthMockRecorder struct {
	mock *OAuth
}

// NewOAuth creates a new mock instance
func NewOAuth(ctrl *gomock.Controller) *OAuth {
	mock := &OAuth{ctrl: ctrl}
	mock.recorder = &OAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *OAuth) EXPECT() *OAuthMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *OAuth) Account(arg0 context.Context, arg1 string) (*app.OAuthAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account", arg0, arg1)
	ret0, _ := ret[0].(*app.OAuthAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Account indicates an expected call of Account
func (mr *OAuthMockRecorder) Account(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*OAuth)(nil).Account), arg0, arg1)
}

// App is a mock of App interface
type App struct {
	ctrl     *gomock.Controller
	recorder *AppMockRecorder
}

// AppMockRecorder is the mock recorder for App
type AppMockRecorder struct {
	mock *App
}

// NewApp creates a new mock instance
func NewApp(ctrl *gomock.Controller) *App {
	mock := &App{ctrl: ctrl}
	mock.recorder = &AppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *App) EXPECT() *AppMockRecorder {
	return m.recorder
}

// VerificationEmail mocks base method
func (m *App) VerificationEmail(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationEmail", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerificationEmail indicates an expected call of VerificationEmail
func (mr *AppMockRecorder) VerificationEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationEmail", reflect.TypeOf((*App)(nil).VerificationEmail), ctx, email)
}

// VerificationUsername mocks base method
func (m *App) VerificationUsername(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerificationUsername", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerificationUsername indicates an expected call of VerificationUsername
func (mr *AppMockRecorder) VerificationUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerificationUsername", reflect.TypeOf((*App)(nil).VerificationUsername), ctx, username)
}

// Login mocks base method
func (m *App) Login(ctx context.Context, email, password string, origin app.Origin) (*app.User, app.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email, password, origin)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(app.AuthToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login
func (mr *AppMockRecorder) Login(ctx, email, password, origin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*App)(nil).Login), ctx, email, password, origin)
}

// Logout mocks base method
func (m *App) Logout(arg0 context.Context, arg1 app.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout
func (mr *AppMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*App)(nil).Logout), arg0, arg1)
}

// CreateUser mocks base method
func (m *App) CreateUser(ctx context.Context, email, username, password string, origin app.Origin) (*app.User, app.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email, username, password, origin)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(app.AuthToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser
func (mr *AppMockRecorder) CreateUser(ctx, email, username, password, origin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*App)(nil).CreateUser), ctx, email, username, password, origin)
}

// DeleteUser mocks base method
func (m *App) DeleteUser(arg0 context.Context, arg1 app.AuthUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *AppMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*App)(nil).DeleteUser), arg0, arg1)
}

// User mocks base method
func (m *App) User(arg0 context.Context, arg1 app.AuthUser, arg2 app.UserID) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1, arg2)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *AppMockRecorder) User(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*App)(nil).User), arg0, arg1, arg2)
}

// UserByAuthToken mocks base method
func (m *App) UserByAuthToken(ctx context.Context, token app.AuthToken) (*app.AuthUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByAuthToken", ctx, token)
	ret0, _ := ret[0].(*app.AuthUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByAuthToken indicates an expected call of UserByAuthToken
func (mr *AppMockRecorder) UserByAuthToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByAuthToken", reflect.TypeOf((*App)(nil).UserByAuthToken), ctx, token)
}

// UpdateUsername mocks base method
func (m *App) UpdateUsername(arg0 context.Context, arg1 app.AuthUser, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsername", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsername indicates an expected call of UpdateUsername
func (mr *AppMockRecorder) UpdateUsername(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsername", reflect.TypeOf((*App)(nil).UpdateUsername), arg0, arg1, arg2)
}

// UpdateEmail mocks base method
func (m *App) UpdateEmail(arg0 context.Context, arg1 app.AuthUser, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail
func (mr *AppMockRecorder) UpdateEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*App)(nil).UpdateEmail), arg0, arg1, arg2)
}

// UpdatePassword mocks base method
func (m *App) UpdatePassword(ctx context.Context, authUser app.AuthUser, oldPass, newPass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, authUser, oldPass, newPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *AppMockRecorder) UpdatePassword(ctx, authUser, oldPass, newPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*App)(nil).UpdatePassword), ctx, authUser, oldPass, newPass)
}

// ListUserByUsername mocks base method
func (m *App) ListUserByUsername(arg0 context.Context, arg1 app.AuthUser, arg2 string, arg3 app.Page) ([]app.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserByUsername", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]app.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserByUsername indicates an expected call of ListUserByUsername
func (mr *AppMockRecorder) ListUserByUsername(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserByUsername", reflect.TypeOf((*App)(nil).ListUserByUsername), arg0, arg1, arg2, arg3)
}

// CreateRecoveryCode mocks base method
func (m *App) CreateRecoveryCode(ctx context.Context, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryCode", ctx, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecoveryCode indicates an expected call of CreateRecoveryCode
func (mr *AppMockRecorder) CreateRecoveryCode(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryCode", reflect.TypeOf((*App)(nil).CreateRecoveryCode), ctx, email)
}

// RecoveryPassword mocks base method
func (m *App) RecoveryPassword(ctx context.Context, code, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoveryPassword", ctx, code, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoveryPassword indicates an expected call of RecoveryPassword
func (mr *AppMockRecorder) RecoveryPassword(ctx, code, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoveryPassword", reflect.TypeOf((*App)(nil).RecoveryPassword), ctx, code, newPassword)
}

// StartWALNotification mocks base method
func (m *App) StartWALNotification(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartWALNotification", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartWALNotification indicates an expected call of StartWALNotification
func (mr *AppMockRecorder) StartWALNotification(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartWALNotification", reflect.TypeOf((*App)(nil).StartWALNotification), ctx)
}
